import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,o as a}from"./app-CFwVIVLe.js";const t={};function l(p,i){return a(),e("div",null,i[0]||(i[0]=[n(`<h1 id="python-portable" tabindex="-1"><a class="header-anchor" href="#python-portable"><span>python portable</span></a></h1><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>create a portable python package on windows.(整合包)<br> win only. (mac later)</p></div><h2 id="background" tabindex="-1"><a class="header-anchor" href="#background"><span>background</span></a></h2><p>For users who don&#39;t have a Python environment, if you want to give them a Python program, you need to include a runtime environment. How can you package it for easier distribution? In other words, how can you create an all-in-one package?</p><p>背景：对于没有python环境的用户，如果想给他一个python程序，需要附带一个运行时环境，如何打包才能更方便，换句话说这就是整合包</p><h2 id="principle" tabindex="-1"><a class="header-anchor" href="#principle"><span>Principle</span></a></h2><p>将一个便携版的python放到目录中，利用这个 <code>python -m pip</code> 安装包, 或者这里只引入一个venv或者poetry，在目标设备上进行最后一步安装依赖。可以提前准备artifacts</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>注意：一定要分清楚你选择的依赖方案是采用的绝对路径还是相对路径，一般最后一install都是绝对路径，所以这一步一定要在目标机器上运行（也就是用户运行python程序之前需要初始化）。<br> 要提醒用户初始化后更改目录需要重新初始化。</p></div><h2 id="steps-for-pip-to-be-tested" tabindex="-1"><a class="header-anchor" href="#steps-for-pip-to-be-tested"><span>Steps for pip ( to be tested )</span></a></h2><h3 id="_1-download-a-portable-python-lite-version-such-as-winpython-miniconda" tabindex="-1"><a class="header-anchor" href="#_1-download-a-portable-python-lite-version-such-as-winpython-miniconda"><span>1.download a portable python (lite version), such as winpython, miniconda</span></a></h3><p>winpython 3.12.4.1dot (<a href="https://sourceforge.net/projects/winpython/files" target="_blank" rel="noopener noreferrer">https://sourceforge.net/projects/winpython/files</a>)</p><p>minconda (<a href="https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe" target="_blank" rel="noopener noreferrer">https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe</a>)</p><h3 id="_2-copy-runtime-env-to-project-folder" tabindex="-1"><a class="header-anchor" href="#_2-copy-runtime-env-to-project-folder"><span>2.copy runtime env to project folder</span></a></h3><p>For winpython, copy all files in python-3.12.4.amd64 to project/runtime (python.exe is project/runtime/python.exe)<br> For anaconda, copy all files to project/runtime</p><h3 id="_3-use-local-python-not-system-python-install-packages" tabindex="-1"><a class="header-anchor" href="#_3-use-local-python-not-system-python-install-packages"><span>3.use local python (not system python) install packages.</span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    runtime/python.exe</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (essential </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">packages</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    runtime/python.exe</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pip</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -r</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> requirements.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-create-bat-file" tabindex="-1"><a class="header-anchor" href="#_4-create-bat-file"><span>4. create bat file</span></a></h3><p>On target os, only need to drop <a href="http://script.py" target="_blank" rel="noopener noreferrer">script.py</a> on python.bat (runtime\\python.exe)</p><div class="language-bat line-numbers-mode" data-highlighter="shiki" data-ext="bat" data-title="bat" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">echo</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> off</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">runtime\\python.exe </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#50A14F;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">%</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="steps-for-poetry-i-use-poetry-to-create-venv" tabindex="-1"><a class="header-anchor" href="#steps-for-poetry-i-use-poetry-to-create-venv"><span>steps for poetry (I use poetry to create venv)</span></a></h2><h3 id="_1-download-a-portable-python-lite-version-such-as-winpython-miniconda-1" tabindex="-1"><a class="header-anchor" href="#_1-download-a-portable-python-lite-version-such-as-winpython-miniconda-1"><span>1.download a portable python (lite version), such as winpython, miniconda</span></a></h3><p>winpython 3.12.4.1dot (<a href="https://sourceforge.net/projects/winpython/files" target="_blank" rel="noopener noreferrer">https://sourceforge.net/projects/winpython/files</a>)</p><h3 id="_2-copy-runtime-env-to-project-folder-1" tabindex="-1"><a class="header-anchor" href="#_2-copy-runtime-env-to-project-folder-1"><span>2.copy runtime env to project folder</span></a></h3><p>For winpython, copy all files in python-3.12.4.amd64 to project/runtime (python.exe is project/runtime/python.exe)</p><h3 id="_3-use-local-python-not-system-python-install-poetry" tabindex="-1"><a class="header-anchor" href="#_3-use-local-python-not-system-python-install-poetry"><span>3. use local python (not system python) install poetry.</span></a></h3><p>All the package is controlled by poety. config cache-dir in local path.</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    runtime/python.exe</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> poetry</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    runtime/python.exe</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> poetry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --local</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cache-dir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;./pypoetry&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-create-init-bat-file" tabindex="-1"><a class="header-anchor" href="#_4-create-init-bat-file"><span>4. create init &amp; bat file</span></a></h3><p>create init.bat for user to run it on target machine. poetry will create hard code path.</p><div class="language-bat line-numbers-mode" data-highlighter="shiki" data-ext="bat" data-title="bat" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">echo</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> off</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">:: init.bat</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">runtime\\python.exe -m poetry install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pause</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>On target os, only need to drop <a href="http://script.py" target="_blank" rel="noopener noreferrer">script.py</a> on python.bat (runtime\\python.exe)</p><div class="language-bat line-numbers-mode" data-highlighter="shiki" data-ext="bat" data-title="bat" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">echo</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> off</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">runtime\\python.exe -m poetry run python </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#50A14F;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">%</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-get-all-artifacts-then-remove-virtualenvs" tabindex="-1"><a class="header-anchor" href="#_5-get-all-artifacts-then-remove-virtualenvs"><span>5. get all artifacts, then remove virtualenvs,</span></a></h3><p>To address the issue of target users having limited network access for downloading packages, we will pre-prepare the necessary materials and clean up any unnecessary venvs on the target machines.</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">runtime/python.exe</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> poetry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">runtime/python.exe</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> poetry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> env</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remove</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --all</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-makefile line-numbers-mode" data-highlighter="shiki" data-ext="makefile" data-title="makefile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># pip</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    @if [ ! -f &quot;requirements.txt&quot; ]; then \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        echo &quot;requirements.txt not found.&quot;; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        exit 1; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    fi</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    echo &quot;Installing dependencies from requirements.txt...&quot;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    runtime/python -m pip install -r requirements.txt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    echo &quot;Dependencies installed successfully.&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">freeze</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    @echo &quot;Generating requirements.txt from installed packages...&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    @poetry run pip freeze &gt; requirements.txt</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    @echo &quot;requirements.txt has been generated.&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    @cat -n requirements.txt | awk &#39;{ printf &quot;\\033[32m%3d\\033[0m \\033[36m%s\\033[0m\\n&quot;, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">$$</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">1, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">$$</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">2 }&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-makefile line-numbers-mode" data-highlighter="shiki" data-ext="makefile" data-title="makefile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># poetry</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    @echo &quot;Building the portable project...&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    @if [ -f &quot;poetry.toml&quot; ]; then \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        echo &quot;poetry.toml exists. Please clean it first.&quot;; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        exit 1; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    fi</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    @runtime/python.exe -m pip install poetry</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    @runtime/python.exe -m poetry config --local cache-dir &quot;./pypoetry&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    @echo &quot;Build completed.&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    @echo &quot;Download artifacts...&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    @runtime/python.exe -m poetry install</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    @echo &quot;Remove virtualenv...&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    @runtime/python.exe -m poetry env remove --all</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">clean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    @if [ -d &quot;pypoetry&quot; ]; then \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        echo &quot;Removing pypoetry directory...&quot;; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        rm -rf pypoetry; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    fi</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    @if [ -f &quot;poetry.toml&quot; ]; then \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        echo &quot;Removing poetry.toml file...&quot;; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        rm poetry.toml; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">freeze</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    @echo &quot;Generating requirements.txt from installed packages...&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    @poetry run pip freeze &gt; requirements.txt</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    @echo &quot;requirements.txt has been generated.&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    @cat -n requirements.txt | awk &#39;{ printf &quot;\\033[32m%3d\\033[0m \\033[36m%s\\033[0m\\n&quot;, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">$$</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">1, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">$$</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">2 }&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37)]))}const o=s(t,[["render",l]]),d=JSON.parse(`{"path":"/lambda/python_portable.html","title":"python portable","lang":"en-US","frontmatter":{"icon":"fab fa-steam","description":"python portable Tips create a portable python package on windows.(整合包) win only. (mac later) background For users who don't have a Python environment, if you want to give them a...","head":[["meta",{"property":"og:url","content":"http://xinxi.jokerpy.top/lambda/python_portable.html"}],["meta",{"property":"og:site_name","content":"HoneyPot"}],["meta",{"property":"og:title","content":"python portable"}],["meta",{"property":"og:description","content":"python portable Tips create a portable python package on windows.(整合包) win only. (mac later) background For users who don't have a Python environment, if you want to give them a..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-13T11:21:21.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-13T11:21:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"python portable\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-13T11:21:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gaoming714\\",\\"url\\":\\"https://github.com/gaoming714\\"}]}"]]},"headers":[{"level":2,"title":"background","slug":"background","link":"#background","children":[]},{"level":2,"title":"Principle","slug":"principle","link":"#principle","children":[]},{"level":2,"title":"Steps for pip ( to be tested )","slug":"steps-for-pip-to-be-tested","link":"#steps-for-pip-to-be-tested","children":[{"level":3,"title":"1.download a portable python (lite version), such as winpython, miniconda","slug":"_1-download-a-portable-python-lite-version-such-as-winpython-miniconda","link":"#_1-download-a-portable-python-lite-version-such-as-winpython-miniconda","children":[]},{"level":3,"title":"2.copy runtime env to project folder","slug":"_2-copy-runtime-env-to-project-folder","link":"#_2-copy-runtime-env-to-project-folder","children":[]},{"level":3,"title":"3.use local python (not system python) install packages.","slug":"_3-use-local-python-not-system-python-install-packages","link":"#_3-use-local-python-not-system-python-install-packages","children":[]},{"level":3,"title":"4. create bat file","slug":"_4-create-bat-file","link":"#_4-create-bat-file","children":[]}]},{"level":2,"title":"steps for poetry (I use poetry to create venv)","slug":"steps-for-poetry-i-use-poetry-to-create-venv","link":"#steps-for-poetry-i-use-poetry-to-create-venv","children":[{"level":3,"title":"1.download a portable python (lite version), such as winpython, miniconda","slug":"_1-download-a-portable-python-lite-version-such-as-winpython-miniconda-1","link":"#_1-download-a-portable-python-lite-version-such-as-winpython-miniconda-1","children":[]},{"level":3,"title":"2.copy runtime env to project folder","slug":"_2-copy-runtime-env-to-project-folder-1","link":"#_2-copy-runtime-env-to-project-folder-1","children":[]},{"level":3,"title":"3. use local python (not system python) install poetry.","slug":"_3-use-local-python-not-system-python-install-poetry","link":"#_3-use-local-python-not-system-python-install-poetry","children":[]},{"level":3,"title":"4. create init & bat file","slug":"_4-create-init-bat-file","link":"#_4-create-init-bat-file","children":[]},{"level":3,"title":"5. get all artifacts, then remove virtualenvs,","slug":"_5-get-all-artifacts-then-remove-virtualenvs","link":"#_5-get-all-artifacts-then-remove-virtualenvs","children":[]}]}],"git":{"createdTime":1730464618000,"updatedTime":1731496881000,"contributors":[{"name":"gaoming714","email":"gaoming714@outlook.com","commits":2}]},"readingTime":{"minutes":2.42,"words":726},"filePathRelative":"lambda/python_portable.md","localizedDate":"November 1, 2024","autoDesc":true,"excerpt":"\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">Tips</p>\\n<p>create a portable python package on windows.(整合包)<br>\\nwin only. (mac later)</p>\\n</div>\\n<h2>background</h2>\\n<p>For users who don't have a Python environment, if you want to give them a Python program, you need to include a runtime environment. How can you package it for easier distribution? In other words, how can you create an all-in-one package?</p>"}`);export{o as comp,d as data};
